name: test

on: push

jobs:
  test:
    runs-on: ubuntu-latest
    env:
      # variables for our front-end tests, see client/src/config.ts
      VITE_API_ORIGIN: http://localhost:3000
      VITE_API_PATH: /api/v1/trpc
    services:
      # spin up a database for this job
      postgres:
        image: postgres:16.1-alpine
        env:
          # Postgres service allows creating a user and a database
          # if we provide some specific environment variables to it.
          # You can find out more about these environment variables
          # by visiting https://hub.docker.com/_/postgres and looking
          # at the "Environment Variables" section.
          POSTGRES_USER: adrienn
          POSTGRES_PASSWORD: turing
          POSTGRES_DB: testdb
        ports:
          # We will need to connect to it somehow. We will use the default
          # Postgres port 5432.
          - 5432:5432
    steps:
      - name: Check out repository
        uses: actions/checkout@v4

      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18.19.0'
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Type check server
        run: npm run typecheck -w=server

      - name: Type check client
        run: npm run typecheck -w=client

      - name: Lint client
        run: npm run lint -w=client

      - name: Lint server
        run: npm run lint -w=server

      - name: Run server tests
        run: npm run test -w=server
        env:
          OPENAI_API_KEY: ${{ secrets.OPENAI_API_KEY }}
          TOKEN_KEY: ${{ vars.TOKEN_KEY }}

      - name: Run client unit tests
        run: npm run test:unit -w=client

      # Add more browsers here if you want to test on more/different browsers
      - name: Install Playwright Browsers
        run: npx playwright install --with-deps chromium

      # Testing the entire application with a running API server.
      # We must start the server first. & at the end of the command
      # makes it run in the background. While it is starting up,
      # we will continue with other steps.
      - name: Start server for E2E tests
        run: npm run start:tsx -w=server &
        env:
          # Pass the same database credentials to our server environment variables,
          # just like we would if we had an .env file.
          # These credentials are not secret, so we can commit them to our repository.
          OPENAI_API_KEY: ${{ secrets.OPENAI_API_KEY }}
          DB_USER: adrienn
          DB_PASSWORD: turing
          DB_NAME: testdb
          DB_HOST: localhost
          TOKEN_KEY: ${{ vars.TOKEN_KEY }}

          # port to start the server on
          PORT: 3000

      # Build the front end for E2E tests. We are building it
      # instead of running it in dev mode because there are some
      # differences between dev mode and production mode front
      # end code.
      - name: Build front end for E2E tests
        run: npm run build -w=client

      # Just to make sure that our API server is up and running
      # before we start our E2E tests, we could use a health check.
      # That means we would call some endpoint on our server and
      # wait for it to respond with a non-failing status code.
      # Our server has a /api/health endpoint that returns a
      # non-failing status code (see server/src/app.ts).
      - name: API server health check
        uses: jtalk/url-health-check-action@v4
        with:
          url: http://localhost:3000/api/health
          max-attempts: 5
          retry-delay: 5s

      - name: Test client E2E
        run: npm run test:e2e -w=client

      # Playwright generates a report of the E2E tests. We will
      # upload that report as an artifact so that we can download
      # it later from the GitHub Actions UI. This will help us
      # debug any issues that occured in E2E tests.
      - uses: actions/upload-artifact@v4
        if: always()
        with:
          name: playwright-report
          path: client/playwright-report/
          retention-days: 7
